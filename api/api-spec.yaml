openapi: 3.0.0
info:
  version: 1.0.0
  title: TODO List API
  description: |
    This is the OpenAPI v3 specification for a TODO List Microservice.
    Data is being saved on MySQL.
servers:
  - url: https://{domain}:{port}/api/{version}
    variables:
      domain:
        default: localhost
        description: Hostname
      port:
        default: '8080'
        description: Port
      version:
        default: v1
        enum:
          - v1
paths:
  /todos/{userId}:
    get:
      description: 'Fetches a list of Todos which can be queried based on the filters given below'
      operationId: getTodosWithFilter
      parameters:
        - name: userId
          in: path
          description: 'ID of the User whose Todos are to be fetched'
          required: true
          schema:
            type: integer
            format: int32
        - name: name
          in: query
          description: 'The name of the Todo item'
          schema:
            type: string
            nullable: true
          examples:
            fetchGrocery:
              value: 'Fetch Grocery'
              summary: 'Fetch Grocery'
            pickUpDad:
              value: 'Pick up Dad'
              summary: 'Pick up Dad'

        - name: desc
          in: query
          description: 'The description of the Todo item'
          schema:
            type: string
            nullable: true
          examples:
            fetchGrocery:
              value: 'Go and fetch grocery from Spencers'
              summary: 'Go and fetch grocery from Spencers'
            pickUpDad:
              value: 'Pick up Dad from Airport'
              summary: 'Pick up Dad from Airport'
        - name: priority
          in: query
          description: 'The priority of the Todo item'
          schema:
            $ref: '#/components/schemas/Priority'
        - name: completed
          in: query
          description: 'The completed status of the Todo item'
          schema:
            type: boolean
            nullable: true
          examples:
            completed:
              value: true
              summary: 'Completed'
            incomplete:
              value: false
              summary: 'Incomplete'
        - name: completionDate
          in: query
          description: 'The completion date of the Todo item'
          schema:
            type: string
            nullable: true
            format: date-time
        - name: dueDate
          in: query
          description: 'The due date of the Todo item'
          schema:
            type: string
            nullable: true
            format: date-time
      responses:
        '200':
          description: A Json array of TODOs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TodoResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '501':
          $ref: '#/components/responses/NotImplemented'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /todo/{userId}/{idToFetch}:
    get:
      description: 'Fetches a single Todo based on a given Todo ID'
      operationId: getTodoById
      parameters:
        - name: idToFetch
          in: path
          description: 'ID of the Todo List to be fetched'
          required: true
          schema:
            type: integer
            format: int32
        - name: userId
          in: path
          description: 'ID of the User whose Todo is to be fetched'
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: 'Fetched Todo Item'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '501':
          $ref: '#/components/responses/NotImplemented'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /todo/{userId}:
    post:
      description: 'Creates a new Todo Item'
      operationId: createTodo
      parameters:
        - name: userId
          in: path
          description: 'ID of the Todo List to be fetched'
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Todo'
      responses:
        '200':
          description: 'Created Todo Item'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '501':
          $ref: '#/components/responses/NotImplemented'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /todo/{userId}/{todoIdToUpdate}:
    patch:
      description: 'Updates an existing Todo Item'
      operationId: updateTodo
      parameters:
        - name: userId
          in: path
          description: 'ID of the Todo item'
          required: true
          schema:
            type: integer
            format: int32
        - name: todoIdToUpdate
          in: path
          description: 'ID of the Todo item'
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Todo'
      responses:
        '200':
          description: 'Created Todo Item'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '501':
          $ref: '#/components/responses/NotImplemented'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /todo/{userId}/{todoIdToDelete}:
    delete:
      description: 'Updates an existing Todo Item'
      operationId: deleteTodo
      parameters:
        - name: userId
          in: path
          description: 'ID of the Todo item'
          required: true
          schema:
            type: integer
            format: int32
        - name: todoIdToDelete
          in: path
          description: 'ID of the Todo item'
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: 'Created Todo Item'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '405':
          $ref: '#/components/responses/NotAllowed'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '501':
          $ref: '#/components/responses/NotImplemented'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
components:
  schemas:
    Todo:
      type: object
      properties:
        name:
          type: string
          description: 'Name of the todo item'
          example: 'Todo Item 1'
        description:
          type: string
          description: 'Description of the task or todo item'
          example: 'Description for Todo Item 1'
        priority:
          $ref: '#/components/schemas/Priority'
        dueDate:
          type: string
          format: date-time
          description: 'The date on which the task is due'
          example: '2021-01-30T08:30:00Z'
        completed:
          type: boolean
          description: 'To mark if the task is completed or not'
          example: false
        completionDate:
          type: string
          format: date-time
          description: 'The date and time when the task was completed'
          example: '2021-01-30T08:30:00Z'
    TodoResponse:
      type: object
      properties:
        todoId:
          type: string
          description: 'ID of the TODO Item'
          example: '0001'
        todo:
          $ref: '#/components/schemas/Todo'
    Error:
      type: object
      properties:
        errorCode:
          type: string
          description: 'Denotes the error code'
          example: 'ERR-01'
        errorMessage:
          type: string
          description: 'The complete error message'
          example: 'This is an error message and description'
    Priority:
      type: string
      enum:
        - NORMAL
        - INTERMEDIATE
        - URGET
      example: 'NORMAL'

  responses:
    NotFound:
      description: 'Returned when the page is not found'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: 'Returned when the user is not authorized to access the endpoint'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: 'Returned when the user is forbidden to access the endpoint'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotAllowed:
      description: 'Returned when the user uses an incorrect method to access the endpoint'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InternalServerError:
      description: 'Returned when the an internal server error occurs'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotImplemented:
      description: 'Returned when a functionality is not implemented'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ServiceUnavailable:
      description: 'Returned when the service is unavailable'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
security:
  - {}



